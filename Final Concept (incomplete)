# Author: Nataliya Faisal
# Date: 24/08/2024
# Purpose: The purpose of this code is to create a receipt, where the user can pick the item they want and how much of the item they want.


from tkinter import *
import tkinter as tk
import random
from tkinter import ttk
from tkinter import messagebox

# Colors
bg_colour1 = "RosyBrown1"
bg_colour2 = "pale violet red"

# Lists to keep track of errors and entries
error_labels = []
receipt_details = []
store_details = []

# Quit subroutine
def quit():
    main_window.destroy()

# Print details of all the receipts
def print_receipt_details():
    # Clear previous details in the receipt details frame
    for widget in receipt_details_frame.winfo_children():
        widget.grid_forget()

    # Clear previous error messages
    for error_label in error_labels:
        error_label.grid_forget()
    error_labels.clear()

    # Create the column headings
    headings = ["Row", "Customer Name", "Item Hired", "Qty. Hired", "Receipt #"]
    for col, heading in enumerate(headings):
        Label(receipt_details_frame, font=("Cambria", 12, "bold"), text=heading, background=bg_colour2, borderwidth=2, relief="solid").grid(column=col, row=0, padx=5, pady=5, sticky='nsew')

    # Add each item in the list into its own row
    for idx, details in enumerate(receipt_details):
        for col, detail in enumerate(details):
            Label(receipt_details_frame, text=detail, background=bg_colour2, borderwidth=1, relief="solid").grid(column=col, row=idx + 1, padx=5, pady=5, sticky='nsew')

    # Adjust column and row weights
    for i in range(len(headings)):
        receipt_details_frame.columnconfigure(i, weight=1)
    for i in range(len(receipt_details) + 1):
        receipt_details_frame.rowconfigure(i, weight=1)
    
    counters['total_entries'] = len(receipt_details)

# Check the inputs are all valid
def check_inputs():
    input_check = 0

    # Clear previous error messages
    for error_label in error_labels:
        error_label.grid_forget()
    error_labels.clear()

    # Check customer name
    if len(entry_Customer_name.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria", 11), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=1, padx=5, pady=5, sticky='w')
        error_labels.append(error_label)
        input_check = 1

    # Check item hired
    if len(entry_The_item_hired.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria", 11), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=2, padx=5, pady=5, sticky='w')
        error_labels.append(error_label)
        input_check = 1

    # Check quantity hired
    if len(entry_Quantity_hired.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria", 11), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=3, padx=5, pady=5, sticky='w')
        error_labels.append(error_label)
        input_check = 1

    if input_check == 0:
        append_name()

def append_name():
    Receipt_number = random.randint(1000, 9999)
    # Append the details to the list
    receipt_details.append([counters['total_entries'], entry_Customer_name.get(), entry_The_item_hired.get(), entry_Quantity_hired.get(), Receipt_number])

    # Clear the input fields
    entry_Customer_name.delete(0, 'end')
    entry_The_item_hired.set('')  
    entry_Quantity_hired.delete(0, 'end')
    counters['total_entries'] += 1

    # Append the entry to store_details
    store_details.append([entry_Customer_name.get(), entry_The_item_hired.get(), entry_Quantity_hired.get(), Receipt_number])

# Delete a row from the list
def delete_row():
    try:
        row_to_delete = int(delete_row_entry.get())
        if row_to_delete < 0 or row_to_delete >= len(receipt_details):
            messagebox.showwarning("Warning", "Invalid Row Number!")
            delete_row_entry.delete(0, 'end')
            return
        del receipt_details[row_to_delete]
        counters['total_entries'] -= 1

        # Update the display to reflect the removal
        print_receipt_details()
        delete_row_entry.delete(0, 'end')
    except ValueError:
        messagebox.showwarning("Warning", "Enter a valid row number!")

# Create the buttons and labels
def setup_buttons():
    # Create labels and input fields
    Label(main_window, font=("Cambria", 12), text="Customer Name:", background=bg_colour2).grid(column=0, row=1, padx=10, pady=10, sticky=E)
    Label(main_window, font=("Cambria", 12), text="Item Hired:", background=bg_colour2).grid(column=0, row=2, padx=10, pady=10, sticky=E)
    Label(main_window, font=("Cambria", 12), text="Qty. Hired:", background=bg_colour2).grid(column=0, row=3, padx=10, pady=10, sticky=E)
    Label(main_window, font=("Cambria", 12), text="Row # to Delete:", background=bg_colour2).grid(column=2, row=4, padx=10, pady=10, sticky=E)

    entry_Customer_name.grid(column=1, row=1, padx=10, pady=10, sticky='ew')
    entry_The_item_hired.grid(column=1, row=2, padx=10, pady=10, sticky='ew')
    entry_Quantity_hired.grid(column=1, row=3, padx=10, pady=10, sticky='ew')
    
    delete_row_entry.grid(column=3, row=4, padx=10, pady=10, sticky='ew')
    Button(main_window, font=("Cambria", 12), text="Delete Row", background=bg_colour1, command=delete_row, width=15).grid(column=4, row=4, padx=10, pady=10, sticky='ew')

    # Create and place buttons at the bottom, centered
    button_frame = Frame(main_window, background=bg_colour2)
    button_frame.grid(column=0, row=11, columnspan=5, pady=20, sticky='ew')

    Button(button_frame, font=("Cambria", 12), text="Enter", background=bg_colour1, command=check_inputs, width=15).pack(side=LEFT, padx=10)
    Button(button_frame, font=("Cambria", 12), text="Print Details", background=bg_colour1, command=print_receipt_details, width=15).pack(side=LEFT, padx=10)
    Button(button_frame, font=("Cambria", 12), text="Quit", background=bg_colour1, command=quit, width=15).pack(side=LEFT, padx=10)

    # Create a frame for the receipt details
    global receipt_details_frame
    receipt_details_frame = Frame(main_window, background=bg_colour2)
    receipt_details_frame.grid(column=0, row=7, columnspan=5, pady=20, sticky='ew')

    # Load and display the image
    image = tk.PhotoImage(file="Julies Party Hire Logo.png")
    image_label = tk.Label(main_window, image=image, background=bg_colour2)
    image_label.grid(column=0, row=0, columnspan=5, padx=10, pady=10, sticky="nsew")
    image_label.image = image

# Start the program
def main():
    global entry_Customer_name, entry_The_item_hired, entry_Quantity_hired, delete_row_entry
    global counters

    counters = {'total_entries': 0}

    entry_Customer_name = Entry(main_window, font=("Cambria", 12), width=30)
    entry_The_item_hired = ttk.Combobox(main_window, values=items_hired, font=("Cambria", 12), width=30)
    entry_Quantity_hired = Entry(main_window, font=("Cambria", 12), width=30)
    delete_row_entry = Entry(main_window, font=("Cambria", 12), width=30)

    # Configure grid rows and columns
    for i in range(5):
        main_window.columnconfigure(i, weight=1)
    for i in range(12):
        main_window.rowconfigure(i, weight=1)

    setup_buttons()
    main_window.mainloop()

# Initialize the main window and start the application
main_window = Tk()
main_window.title("Julie's Party Hire")
main_window.configure(background=bg_colour2)

# Define items for the combobox
items_hired = ['Utensils', 'Balloons', 'Confetti', 'Banners and signs', 'Table cloths', 'Disco balls', 'Speakers']

# Run the application
main()
