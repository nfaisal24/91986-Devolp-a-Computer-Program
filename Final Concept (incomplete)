# Author: Nataliya Faisal
# Date: 13/08/2024
# Purpose: 

# Import tkinter so we can make a GUI
from tkinter import *
import tkinter as tk
# For the random receipt generator
import random 
# For the combobox
from tkinter import ttk
from tkinter import messagebox

# Adding a background colour + colour of the buttons
bg_colour1 = "RosyBrown1"
bg_colour2 = "pale violet red"

# Create a list to keep track of error message labels for easy removal
error_labels = []
receipt_details = []
store_details = []

# Quit subroutine
def quit():
    main_window.destroy()

# Print details of all the receipts
def print_receipt_details():
    # Clear previous details
    for widget in main_window.grid_slaves():
        if widget.grid_info()["row"] > 7:
            widget.grid_forget()
    
    # Clear previous error messages
    for error_label in error_labels:
        error_label.grid_forget()
    error_labels.clear()

    # Create the column headings
    Label(main_window, font=("Cambria 11"), text="Row", background=bg_colour2).grid(column=0, row=7)
    Label(main_window, font=("Cambria 11"), text="Customer full name", background=bg_colour2).grid(column=1, row=7)
    Label(main_window, font=("Cambria 11"), text="The item hired", background=bg_colour2).grid(column=2, row=7)
    Label(main_window, font=("Cambria 11"), text="Quantity hired", background=bg_colour2).grid(column=3, row=7)
    Label(main_window, font=("Cambria 11"), text="Receipt Number", background=bg_colour2).grid(column=4, row=7)

    # Add each item in the list into its own row
    for idx, details in enumerate(receipt_details):
        if len(details) == 4:  # Ensure there are enough elements in the list
            Label(main_window, text=idx, background=bg_colour2).grid(column=0, row=idx + 8)
            Label(main_window, text=details[0], background=bg_colour2).grid(column=1, row=idx + 8)
            Label(main_window, text=details[1], background=bg_colour2).grid(column=2, row=idx + 8)
            Label(main_window, text=details[2], background=bg_colour2).grid(column=3, row=idx + 8)
            Label(main_window, text=details[3], background=bg_colour2).grid(column=4, row=idx + 8)

    counters['total_entries'] = len(receipt_details)

# Check the inputs are all valid
def check_inputs():
    input_check = 0

    # Clear previous error messages
    for error_label in error_labels:
        error_label.grid_forget()
    error_labels.clear()

    # Check that the customer's full name is not blank, set error text if blank  
    if len(entry_Customer_full_name.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria 11"), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=1)
        error_labels.append(error_label)
        input_check = 1

    # Check that the item that has been hired is not blank, set error text if blank     
    if len(entry_The_item_hired.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria 11"), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=2)
        error_labels.append(error_label)
        input_check = 1

    # Check that the number of items the customer gets is not blank, set error text if blank
    if len(entry_Quantity_hired.get()) == 0:
        error_label = Label(main_window, fg="red", font=("Cambria 11"), text="Required", background=bg_colour2)
        error_label.grid(column=2, row=3)
        error_labels.append(error_label)
        input_check = 1

    if input_check == 0:
        append_name()

def append_name():
    Receipt_number = random.randint(1000, 9999)
    # Append each item to its own area of the list
    receipt_details.append([entry_Customer_full_name.get(), entry_The_item_hired.get(), entry_Quantity_hired.get(), Receipt_number])

    # Clear the boxes
    entry_Customer_full_name.delete(0, 'end')
    entry_The_item_hired.set('')  # Clear ComboBox selection
    entry_Quantity_hired.delete(0, 'end')
    counters['total_entries'] += 1

    # Creating the entry as a list of values
    entry = [entry_Customer_full_name.get(), entry_The_item_hired.get(), entry_Quantity_hired.get(), Receipt_number]
    # Append the entry to the store_details 
    store_details.append(entry)

# Delete a row from the list
def delete_row():
    try:
        row_to_delete = int(delete_row_entry.get())
        if row_to_delete < 0 or row_to_delete >= len(receipt_details):
            messagebox.showwarning("Warning", "Invalid Row Number!")
            delete_row_entry.delete(0, 'end')
            return
        del receipt_details[row_to_delete]
        counters['total_entries'] -= 1
        # Update the display to reflect the removal
        print_receipt_details()
        delete_row_entry.delete(0, 'end')
    except ValueError:
        messagebox.showwarning("Warning", "Invalid Row Number! (No alphabetical letters or special characters)")

# Create the buttons and labels
def setup_buttons():
    # Create all the empty and default labels, buttons and entry boxes. Put them in the correct grid location
    Label(main_window, font=("Cambria 11"), text="Customer full name", background=bg_colour2).grid(column=0, row=1, sticky=E)
    Label(main_window, font=("Cambria 11"), text="The item hired", background=bg_colour2).grid(column=0, row=2, sticky=E)
    Label(main_window, font=("Cambria 11"), text="Quantity hired", background=bg_colour2).grid(column=0, row=3, sticky=E)
    Label(main_window, font=("Cambria 11"), text="Row #", background=bg_colour2).grid(column=2, row=4, sticky=E)

    entry_Customer_full_name.grid(column=1, row=1, padx=10, pady=5)
    entry_The_item_hired.grid(column=1, row=2, padx=10, pady=5)
    entry_Quantity_hired.grid(column=1, row=3, padx=10, pady=5)
    
    delete_row_entry.grid(column=3, row=4, padx=5, pady=5)
    Button(main_window, font=("Cambria 10"), text="Delete Row", background=bg_colour1, command=delete_row, width=15).grid(column=4, row=4, padx=5, pady=5)

    # Create and place buttons at the bottom, centered
    button_frame = Frame(main_window, background=bg_colour2)
    button_frame.grid(column=0, row=11, columnspan=5, pady=10, sticky='ew')

    Button(button_frame, font=("Cambria 10"), text="Enter", background=bg_colour1, command=check_inputs, width=10).pack(side=LEFT, padx=5)
    Button(button_frame, font=("Cambria 10"), text="Print details", background=bg_colour1, command=print_receipt_details, width=15).pack(side=LEFT, padx=5)
    Button(button_frame, font=("Cambria 10"), text="Quit", background=bg_colour1, command=quit, width=10).pack(side=LEFT, padx=5)

    # Loading the png image
    image = tk.PhotoImage(file="Julies Party Hire Logo.png")
    image_label = tk.Label(main_window, image=image, background=bg_colour2)
    image_label.grid(column=0, row=0, columnspan=5, padx=2, pady=10, sticky="nsew")
    image_label.image = image

# Start the program running
def main():
    # Create empty lists and variables
    global entry_Customer_full_name, entry_The_item_hired, entry_Quantity_hired, delete_row_entry
    global counters

    counters = {'total_entries': 0}

    entry_Customer_full_name = Entry(main_window, font=("Cambria 11"))
    entry_The_item_hired = ttk.Combobox(main_window, values=items_hired, font=("Cambria 11"))
    entry_Quantity_hired = Entry(main_window, font=("Cambria 11"))
    delete_row_entry = Entry(main_window, font=("Cambria 11"))

    # Configure grid rows and columns
    main_window.columnconfigure(0, weight=1)
    main_window.columnconfigure(1, weight=1)
    main_window.columnconfigure(2, weight=1)
    main_window.columnconfigure(3, weight=1)
    main_window.columnconfigure(4, weight=1)
    main_window.rowconfigure(0, weight=1)
    main_window.rowconfigure(1, weight=0)
    main_window.rowconfigure(2, weight=0)
    main_window.rowconfigure(3, weight=0)
    main_window.rowconfigure(4, weight=0)
    main_window.rowconfigure(5, weight=0)
    main_window.rowconfigure(6, weight=0)
    main_window.rowconfigure(7, weight=0)
    main_window.rowconfigure(8, weight=0)
    main_window.rowconfigure(9, weight=0)
    main_window.rowconfigure(10, weight=0)

    setup_buttons()
    main_window.mainloop()

    
# Create empty lists and variables
counters = {'total_entries': 0, 'name_count': 0}
receipt_details = []
store_details = []  # Define store_details here

main_window = Tk()
main_window.title("Julie's Party Hire")

# Add background color
main_window.configure(background=bg_colour2)

items_hired = ['Utensils', 'Balloons', 'Confetti', 'Banners and signs', 'Table cloths', 'Disco balls', 'Speakers']

entry_Customer_full_name = Entry(main_window)
entry_The_item_hired = ttk.Combobox(main_window, values=items_hired)
entry_Quantity_hired = Entry(main_window)
delete_row_entry = Entry(main_window)  # Use consistent name

main()
